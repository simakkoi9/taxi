services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - taxi-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    restart: always
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - taxi-network

  eureka-service:
    build: ./eureka-service
    container_name: eureka-service
    ports:
      - "8761:8761"
    environment:
      MANAGEMENT_OTLP_TRACING_ENDPOINT: http://tempo:4318/v1/traces
    networks:
      - taxi-network

  gateway-service:
    build: ./gateway-service
    hostname: gateway-service
    container_name: gateway-service
    ports:
      - "8050:8050"
    depends_on:
      eureka-service:
        condition: service_started
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-service:8761/eureka
      MANAGEMENT_OTLP_TRACING_ENDPOINT: http://tempo:4318/v1/traces
    networks:
      - taxi-network

  passenger-service:
    build: ./passenger-service
    hostname: passenger-service
    container_name: passenger-service
    expose:
      - 8080
    depends_on:
      - postgres
      - eureka-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/passenger_db
      SPRING_DATASOURCE_USERNAME: ${USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${PASSWORD}
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-service:8761/eureka
      MANAGEMENT_OTLP_TRACING_ENDPOINT: http://tempo:4318/v1/traces
    networks:
      - taxi-network

  driver-service:
    build: ./driver-service
    hostname: driver-service
    container_name: driver-service
    expose:
      - 8081
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_healthy
      eureka-service:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/driver_db
      SPRING_DATASOURCE_USERNAME: ${USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-service:8761/eureka
      MANAGEMENT_OTLP_TRACING_ENDPOINT: http://tempo:4318/v1/traces
    networks:
      - taxi-network

  rides-service:
    build: ./rides-service
    hostname: rides-service
    container_name: rides-service
    expose:
      - 8082
    depends_on:
      rides-db:
        condition: service_started
      kafka:
        condition: service_healthy
      eureka-service:
        condition: service_started
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://rides-db:27017/rides_db
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_CLOUD_OPENFEIGN_CLIENT_CONFIG_PASSENGER_CLIENT_URL: http://passenger-service:8080/api/v1/passengers
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-service:8761/eureka
      MANAGEMENT_OTLP_TRACING_ENDPOINT: http://tempo:4318/v1/traces
    networks:
      - taxi-network

  rating-service:
    build:
      context: ./rating-service
      dockerfile: src/main/docker/Dockerfile.jvm
    hostname: rating-service
    container_name: rating-service
    expose:
      - 8083
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_healthy
      eureka-service:
        condition: service_started
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/rating_db
      QUARKUS_DATASOURCE_USERNAME: ${USERNAME}
      QUARKUS_DATASOURCE_PASSWORD: ${PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      QUARKUS_REST_CLIENT_RIDESCLIENT_URL: http://rides-service:8082/api/v1
      QUARKUS_EUREKA_SERVICE_URL_DEFAULTZONE: http://eureka-service:8761/eureka
      QUARKUS_EUREKA_HOST_NAME: rating-service
      QUARKUS_MICROMETER_EXPORT_OTLP_URL: http://tempo:4318/v1/traces
    networks:
      - taxi-network

  rides-db:
    image: mongo:6
    hostname: rides-db
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_DATABASE: rides_db
    volumes:
      - rides_db_data:/data/db
    networks:
      - taxi-network

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${USERNAME}
      POSTGRES_PASSWORD: ${PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: passenger_db,driver_db,rating_db
    ports:
      - "5432:5432"
    volumes:
      - ./multiple-databases/multiple-databases.sh:/docker-entrypoint-initdb.d/multiple-databases.sh
      - postgres_data:/var/lib/postgresql/data
    networks:
      - taxi-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
    networks:
      - taxi-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    networks:
      - taxi-network
    volumes:
      - grafana_data:/var/lib/grafana

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    depends_on:
      - volume-init
    volumes:
      - ./config/loki-config.yml:/etc/loki-config.yml
      - loki_data:/tmp/loki
    user: "472:472"
    command: [ "-config.expand-env=true", "-config.file=/etc/loki-config.yml" ]
    networks:
      - taxi-network

  volume-init:
    image: busybox:1.35
    container_name: volume-init
    command: [ "sh", "-c", "chown -R 472:472 /tmp/loki && mkdir -p /tmp/tempo/traces && chmod -R 777 /tmp/tempo" ]
    volumes:
      - loki_data:/tmp/loki
      - tempo_data:/tmp/tempo
    networks:
      - taxi-network
    entrypoint: [ "sh", "-c", "chown -R 472:472 /tmp/loki && mkdir -p /tmp/tempo/traces && chmod -R 777 /tmp/tempo && exit 0" ]

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml
    networks:
      - taxi-network

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    restart: unless-stopped
    depends_on:
      - volume-init
      - loki
    ports:
      - "3200:3200"
      - "4317:4317"
      - "4318:4318"
    volumes:
      - ./config/tempo.yml:/etc/tempo.yml
      - tempo_data:/tmp/tempo
    command: -config.file=/etc/tempo.yml
    networks:
      - taxi-network

volumes:
  rides_db_data:
  postgres_data:
  grafana_data:
  loki_data:
  tempo_data:

networks:
  taxi-network:
    driver: bridge
