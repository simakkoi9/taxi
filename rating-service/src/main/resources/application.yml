quarkus:
  application:
    name: rating-service

  http:
    host: 0.0.0.0
    port: 8083
    test-port: 8084

  eureka:
    enable: true
    region: defaultZone
    prefer-same-zone: true
    host-name: ${EUREKA_HOSTNAME:localhost}
    service-url:
      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761/eureka}
    metadata:
      app-key: rating-service
    heartbeat:
      enabled: true
      health-path: /info/health
      status-path: /info/status

  default-locale: ru
  locales: ru,en

  datasource:
    db-kind: postgresql
    username: ${QUARKUS_DATABASE_USERNAME:simakkoi}
    password: ${QUARKUS_DATABASE_PASSWORD:4130}
    jdbc:
      url: ${QUARKUS_DATABASE_URL:jdbc:postgresql://localhost:5432/rating_db}

  flyway:
    migrate-at-start: true
    locations: db/migration

  hibernate-orm:
    database:
      generation: validate

  rest-client:
    ridesClient:
      url: ${RIDES_CLIENT_URL:http://localhost:8082/api/v1}
      connect-timeout: 5000
      read-timeout: 5000

  log:
    level: DEBUG

  micrometer:
    export:
      prometheus:
        enabled: true
        path: metrics/prometheus

kafka:
  bootstrap:
    servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

mp:
  messaging:
    incoming:
      get-person:
        connector: smallrye-kafka
        topic: person-topic
        key:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        auto:
          offset:
            reset: latest
    outgoing:
      send-person:
        connector: smallrye-kafka
        topic: rating-topic
        key:
          serializer: org.apache.kafka.common.serialization.StringSerializer
        value:
          serializer: io.quarkus.kafka.client.serialization.ObjectMapperSerializer

rates:
  limit: 10